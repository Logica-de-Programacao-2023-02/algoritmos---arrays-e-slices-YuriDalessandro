package main

import "fmt"

func main() {
	array := [3]int{5, 8, 10}

	soma := 0
	for _, valor := range array {
		soma += valor
	}

	fmt.Printf("A soma dos valores no array é: %d\n", soma)
}


package main

import "fmt"

func main() {
	slice := []int{1, 2, 3, 4, 5}

	if len(slice) > 2 {
		slice = append(slice[:2], slice[3:]...)
	} else {
		fmt.Println("O slice não possui pelo menos três elementos.")
		return
	}

	fmt.Println("Slice resultante:", slice)
}

package main

import "fmt"

func main() {
	array := [4]float64{1.5, 2.0, 3.5, 4.0}

	produto := 1.0

	for _, valor := range array {
		produto *= valor
	}

	fmt.Printf("O produto dos valores no array é: %.2f\n", produto)
}

package main

import (
	"fmt"
)

func main() {
	var tamanho int
	fmt.Print("Informe o tamanho do Slice: ")
	fmt.Scan(&tamanho)

	slice := make([]int, tamanho)

	for i := 0; i < tamanho; i++ {
		fmt.Printf("Informe o valor para o elemento %d: ", i+1)
		fmt.Scan(&slice[i])
	}

	fmt.Println("Slice:", slice)

	soma := 0
	for _, valor := range slice {
		soma += valor
	}

	fmt.Printf("A soma dos valores no Slice é: %d\n", soma)
}


package main

import "fmt"

func main() {
	linhas, colunas := 3, 2

	matriz := make([][]int, linhas)
	for i := range matriz {
		matriz[i] = make([]int, colunas)
	}

	for i := 0; i < linhas; i++ {
		for j := 0; j < colunas; j++ {
			fmt.Printf("Informe o valor para o elemento [%d][%d]: ", i, j)
			fmt.Scan(&matriz[i][j])
		}
	}

	fmt.Println("Matriz Resultante:")
	for i := 0; i < linhas; i++ {
		for j := 0; j < colunas; j++ {
			fmt.Printf("%d\t", matriz[i][j])
		}
		fmt.Println()
	}
}

package main

import "fmt"

func main() {
	array := [10]int{5, 10, 15, 20, 25, 30, 35, 40, 45, 50}

	var valorProcurado int
	fmt.Print("Informe um valor para buscar no array: ")
	fmt.Scan(&valorProcurado)

	encontrado := false
	for _, valor := range array {
		if valor == valorProcurado {
			encontrado = true
			break
		}
	}

	if encontrado {
		fmt.Printf("O valor %d está presente no array.\n", valorProcurado)
	} else {
		fmt.Printf("O valor %d não está presente no array.\n", valorProcurado)
	}
}


	package main

import "fmt"

func main() {
	slice := make([]int, 0, 5)

	var numero int
	fmt.Print("Informe um número inteiro: ")
	fmt.Scan(&numero)

	encontrado := false
	for _, valor := range slice {
		if valor == numero {
			encontrado = true
			break
		}
	}

	if !encontrado {
		slice = append(slice, numero)
	}

	fmt.Println("Slice resultante:", slice)
}

package main

import "fmt"

func main() {
	slice := []string{"apple", "banana", "orange", "apple", "grape", "kiwi", "apple", "melon"}

	var valor string
	fmt.Print("Informe um valor a ser removido do slice: ")
	fmt.Scan(&valor)

	novoSlice := []string{}
	for _, elemento := range slice {
		if elemento != valor {
			novoSlice = append(novoSlice, elemento)
		}
	}

	fmt.Println("Slice resultante:", novoSlice)
}

package main

import "fmt"

func main() {
	array := [6]float64{2.5, 4.7, 6.1, 8.3, 10.2, 12.6}

	var numero float64
	fmt.Print("Informe um número a ser adicionado em todas as posições do array: ")
	fmt.Scan(&numero)

	for i := 0; i < len(array); i++ {
		array[i] += numero
	}

	fmt.Println("Array resultante:", array)
}

package main

import (
	"fmt"
	"math"
)

func main() {
	slice := []int{4, 8, 12, 6, 15, 2, 9, 7, 11, 3}

	valorMinimo := math.MaxInt
	valorMaximo := math.MinInt

	for _, valor := range slice {
		if valor < valorMinimo {
			valorMinimo = valor
		}
		if valor > valorMaximo {
			valorMaximo = valor
		}
	}

	fmt.Printf("O valor mínimo no slice é: %d\n", valorMinimo)
	fmt.Printf("O valor máximo no slice é: %d\n", valorMaximo)
}

package main

import "fmt"

func main() {
package main

import "fmt"

func main() {
	array := [5]int{6, 8, 12, 7, 9}

	slice := []int{}

	for _, valor := range array {
		if valor%3 == 0 {
			slice = append(slice, valor)
		}
	}

	fmt.Println("Novo Slice (elementos múltiplos de 3):", slice)
}	matriz := [2][3]int{
		{1, 2, 3},
		{4, 5, 6},
	}

	var linha int
	fmt.Print("Informe um índice de linha (0 ou 1): ")
	fmt.Scan(&linha)

	var coluna int
	fmt.Print("Informe um índice de coluna (0, 1 ou 2): ")
	fmt.Scan(&coluna)

	if linha >= 0 && linha < len(matriz) && coluna >= 0 && coluna < len(matriz[0]) {
		valor := matriz[linha][coluna]
		fmt.Printf("O valor na posição [%d][%d] é: %d\n", linha, coluna, valor)
	} else {
		fmt.Println("Índices informados estão fora do intervalo da matriz.")
	}
}

package main

import "fmt"

func main() {
	array := [7]int{2, 5, 8, 12, 15, 18, 22}

	var numero int
	fmt.Print("Informe um número a ser adicionado ao primeiro e ao último elemento do array: ")
	fmt.Scan(&numero)

	array[0] += numero
	array[len(array)-1] += numero

	fmt.Println("Array resultante:", array)
}

package main

import "fmt"

func main() {
	slice := []int{3, 7, 11, 5, 8, 15, 2, 10}

	var indice1, indice2 int
	fmt.Print("Informe o primeiro índice de elemento a ser trocado (0 a 7): ")
	fmt.Scan(&indice1)
	fmt.Print("Informe o segundo índice de elemento a ser trocado (0 a 7): ")
	fmt.Scan(&indice2)

	if indice1 >= 0 && indice1 < len(slice) && indice2 >= 0 && indice2 < len(slice) {
		slice[indice1], slice[indice2] = slice[indice2], slice[indice1]

		fmt.Println("Slice resultante:", slice)
	} else {
		fmt.Println("Índices informados estão fora do intervalo do slice.")
	}
}

package main

import "fmt"

func main() {
	array := [10]float64{3.2, 8.7, 4.5, 10.1, 6.0, 2.8, 7.3, 5.5, 9.9, 1.6}

	slice := []float64{}

	for _, valor := range array {
		if valor > 5 {
			slice = append(slice, valor)
		}
	}

	fmt.Println("Novo Slice (elementos maiores que 5):", slice)
}

package main

import "fmt"

func main() {
	array := [10]int{3, 8, 4, 10, 6, 2, 7, 5, 9, 1}

	slice := []int{}

	for _, valor := range array {
		if valor%2 == 0 {
			slice = append(slice, valor)
		}
	}

	fmt.Println("Novo Slice (elementos pares):", slice)
}


package main

import "fmt"

func main() {
	array := [10]int{1, 4, 7, 2, 9, 6, 5, 8, 3, 10}

	soma := 0
	for i := 0; i < len(array); i += 2 {
		soma += array[i]
	}

	fmt.Printf("A soma dos elementos nas posições pares do array é: %d\n", soma)
}

package main

import (
	"fmt"
	"math"
)

func main() {
	var n int
	fmt.Print("Informe um número inteiro positivo: ")
	fmt.Scan(&n)

	if n <= 0 {
		fmt.Println("Por favor, informe um número inteiro positivo.")
		return
	}

	numerosPrimos := gerarPrimos(n)

	fmt.Printf("Os %d primeiros números primos são: %v\n", n, numerosPrimos)
}

func ehPrimo(num int) bool {
	if num < 2 {
		return false
	}
	limite := int(math.Sqrt(float64(num)))
	for i := 2; i <= limite; i++ {
		if num%i == 0 {
			return false
		}
	}
	return true
}

func gerarPrimos(n int) []int {
	primos := make([]int, 0, n)
	num := 2
	for len(primos) < n {
		if ehPrimo(num) {
			primos = append(primos, num)
		}
		num++
	}
	return primos
}


package main

import "fmt"

func main() {
	var n int
	fmt.Print("Informe o tamanho dos arrays: ")
	fmt.Scan(&n)

	array1 := lerArray("Informe os elementos do primeiro array:", n)
	array2 := lerArray("Informe os elementos do segundo array:", n)

	arraySoma := somarArrays(array1, array2)

	fmt.Println("Primeiro Array:", array1)
	fmt.Println("Segundo Array:", array2)
	fmt.Println("Terceiro Array (Soma):", arraySoma)
}

func lerArray(mensagem string, tamanho int) []int {
	array := make([]int, tamanho)
	for i := 0; i < tamanho; i++ {
		fmt.Printf("%s Elemento %d: ", mensagem, i+1)
		fmt.Scan(&array[i])
	}
	return array
}

func somarArrays(array1, array2 []int) []int {
	tamanho := len(array1)
	arraySoma := make([]int, tamanho)
	for i := 0; i < tamanho; i++ {
		arraySoma[i] = array1[i] + array2[i]
	}
	return arraySoma
}

package main

import "fmt"

func main() {
	var tamanho int
	fmt.Print("Informe o tamanho do array: ")
	fmt.Scan(&tamanho)

	array := lerArray("Informe os elementos do array:", tamanho)

	ordenado := verificarOrdenacao(array)

	if ordenado {
		fmt.Println("O array está ordenado em ordem crescente.")
	} else {
		fmt.Println("O array não está ordenado em ordem crescente.")
	}
}

func lerArray(mensagem string, tamanho int) []int {
	array := make([]int, tamanho)
	for i := 0; i < tamanho; i++ {
		fmt.Printf("%s Elemento %d: ", mensagem, i+1)
		fmt.Scan(&array[i])
	}
	return array
}

func verificarOrdenacao(array []int) bool {
	tamanho := len(array)
	for i := 0; i < tamanho-1; i++ {
		if array[i] > array[i+1] {
			return false
		}
	}
	return true
}
